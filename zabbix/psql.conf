# psql.conf
# Additional UserParameters for zabbix-agent. Postgres.

# pg_stat_database:
# One row per database, showing database OID, database name, number of active server processes connected to that database, number of transactions committed and rolled back in that database, total disk blocks read, and total buffer hits (i.e., block read requests avoided by finding the block already in buffer cache).
# xact_commit (number of transactions committed)
# numbackends (number of active server processes connected)
# blks_read (total disk blocks read)
# arguments: 1 - monitored parameter; 2 - username; 3 - port; 4 - database (optinal)

# for ubuntu a standard package is used, no path. At least fro now :)
# for centos a link would need to be made for the standard path
UserParameter=psql.stat[*],psql postgres -p $3 -U $2 -A -t -c "select sum($1) from pg_stat_database where datname like '$4%'"
# centos, none standard install. The only standard here is no standard. Additional item is still better then a wrapper
UserParameter=psql.stat.centos[*],/usr/local/pgsql/bin/psql postgres -p $3 -U $2 -A -t -c "select sum($1) from pg_stat_database where datname like '$4%'"

# UGC
# User Generated Content Entries
UserParameter=usr.content.count[*],psql $1 -tA -p $3 -U $2 -c "select count(*) from das"
# lack of standards produce unsacalable infrastracture. WP is the king of it.
UserParameter=usr.content.centos.count[*],/usr/local/pgsql/bin/psql $1 -tA -p $3 -U $2 -c "select count(*) from das"


# Get port on which postgres is listening. Getting it out of configuration file is 10x faster then using netstat. But we have as many config locations, as ports itselfs :)
# so lets get location of config first
# It seems, it's too much to ask to have some sort of standartization, like same location for configs, same ports to listen on, standard ro user to monior with, etc.
UserParameter=postgres.port,awk '/port =/ {print $3}' $(ps -C postgres -o %a | awk -F= '/config_file=/ {print $NF}')

# Being collected using perl script as described in appservers.conf - 7/29/09
# To get number of stuns from pool servers
# ARG1 - database; ARG2 - port; ARG3 - username
#UserParameter=pool.stun.count[*],/usr/local/pgsql/bin/psql $1 -p $2 -U $3 -tA -c "select count(*) from provider_pool where stunnable_until > current_timestamp;"
# getting stunned provider and host 
#UserParameter=pool.stun.provider[*],stuns=`/usr/local/pgsql/bin/psql $1 -p $2 -U $3 -tA -c "select provider,connect_info from provider_pool where stunnable_until > current_timestamp;"` && [ -z "$stuns" ] && echo None || echo $stuns
